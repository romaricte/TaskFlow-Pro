generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  attachments       Attachment[]
  comments          Comment[]
  invoicesCreated   Invoice[]          @relation("InvoiceCreator")
  clientInvoices    Invoice[]          @relation("InvoiceClient")
  notifications     Notification[]
  organizationUsers OrganizationUser[]
  password          Password?
  projectsCreated   Project[]
  projectMembers    ProjectMember[]
  tasksCreated      Task[]             @relation("TaskCreator")
  taskAssignments   TaskAssignment[]
  timeEntries       TimeEntry[]
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id                  String             @id @default(uuid())
  name                String
  logoUrl             String?
  subscriptionType    String
  subscriptionExpires DateTime?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  users               OrganizationUser[]
  projects            Project[]
}

model OrganizationUser {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
}

model Project {
  id             String          @id @default(uuid())
  organizationId String
  name           String
  description    String
  status         String
  startDate      DateTime
  endDate        DateTime?
  budget         Float?
  currency       String          @default("EUR")
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  boards         Board[]
  invoices       Invoice[]
  createdBy      User            @relation(fields: [createdById], references: [id])
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        ProjectMember[]
  tasks          Task[]
  taskLabels     TaskLabel[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Board {
  id          String   @id @default(uuid())
  projectId   String
  name        String
  description String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  columns     Column[]
}

model Column {
  id        String   @id @default(uuid())
  boardId   String
  name      String
  position  Int
  color     String
  taskLimit Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks     Task[]
}

model Task {
  id               String                @id @default(uuid())
  columnId         String
  projectId        String
  title            String
  description      String?
  priority         String
  status           String
  position         Int
  dueDate          DateTime?
  estimatedHours   Float?
  createdById      String
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  attachments      Attachment[]
  comments         Comment[]
  invoiceItems     InvoiceItem[]
  createdBy        User                  @relation("TaskCreator", fields: [createdById], references: [id])
  project          Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  column           Column                @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignments      TaskAssignment[]
  labelAssignments TaskLabelAssignment[]
  timeEntries      TimeEntry[]
}

model TaskAssignment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model TaskLabel {
  id          String                @id @default(uuid())
  projectId   String
  name        String
  color       String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  project     Project               @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignments TaskLabelAssignment[]
}

model TaskLabelAssignment {
  id        String    @id @default(uuid())
  taskId    String
  labelId   String
  createdAt DateTime  @default(now())
  label     TaskLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, labelId])
}

model Comment {
  id        String    @id @default(uuid())
  taskId    String
  userId    String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  user      User      @relation(fields: [userId], references: [id])
  task      Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Attachment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  fileName  String
  filePath  String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TimeEntry {
  id          String    @id @default(uuid())
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int
  billable    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String        @id @default(uuid())
  projectId     String
  clientId      String
  invoiceNumber String
  issueDate     DateTime
  dueDate       DateTime
  status        String
  subtotal      Float
  taxRate       Float
  taxAmount     Float
  total         Float
  notes         String?
  createdById   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     User          @relation("InvoiceCreator", fields: [createdById], references: [id])
  client        User          @relation("InvoiceClient", fields: [clientId], references: [id])
  project       Project       @relation(fields: [projectId], references: [id])
  items         InvoiceItem[]
}

model InvoiceItem {
  id          String   @id @default(uuid())
  invoiceId   String
  taskId      String?
  description String
  quantity    Float
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  task        Task?    @relation(fields: [taskId], references: [id])
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model Notification {
  id            String   @id @default(uuid())
  userId        String
  type          String
  title         String
  content       String?
  referenceId   String
  referenceType String
  read          Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
